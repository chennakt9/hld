{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "2nPR4351UKCOAFzXwXFLX",
      "type": "text",
      "x": 683.37109375,
      "y": 1045.96875,
      "width": 761.3914184570312,
      "height": 880,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a0",
      "roundness": null,
      "seed": 1323685173,
      "version": 116,
      "versionNonce": 1779853572,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1752656695170,
      "link": null,
      "locked": false,
      "text": "Redis solution\n- topk:hourly:${now.toISOString()}\n- topk:daily:${now.toISOString().split('T')[0]}\n- topk:alltime\n\nasync incrementItem(item) {\n    const keys = [\n      getHourlyKey(),\n      getDailyKey(),\n      getAllTimeKey()\n    ];\n\n    for (const key of keys) {\n      await this.redis.zincrby(key, 1, item); // increament for all keys\n\n      // Optional: Expire hourly after 2 hours, daily after 2 days\n      if (key.includes('hourly')) await this.redis.expire(key, 2 * 60 * 60); // 2hr\n      if (key.includes('daily')) await this.redis.expire(key, 2 * 24 * 60 * 60); // 2 days\n    }\n  }\n\nasync getTopK(timeRange = 'alltime', k = 5) {\n    let key;\n\n    if (timeRange === 'hour') key = getHourlyKey();\n    else if (timeRange === 'day') key = getDailyKey();\n    else key = getAllTimeKey();\n\n    return await this.redis.zrevrange(key, 0, k - 1, 'WITHSCORES');\n  }\n\n\ninput:\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"kiwi\"}'\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"apple\"}'\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"apple\"}'\n\n\noutput:\n{\n  \"topK\": [\"apple\", \"2\", \"kiwi\", \"1\"]\n}\n\n",
      "fontSize": 16,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Redis solution\n- topk:hourly:${now.toISOString()}\n- topk:daily:${now.toISOString().split('T')[0]}\n- topk:alltime\n\nasync incrementItem(item) {\n    const keys = [\n      getHourlyKey(),\n      getDailyKey(),\n      getAllTimeKey()\n    ];\n\n    for (const key of keys) {\n      await this.redis.zincrby(key, 1, item); // increament for all keys\n\n      // Optional: Expire hourly after 2 hours, daily after 2 days\n      if (key.includes('hourly')) await this.redis.expire(key, 2 * 60 * 60); // 2hr\n      if (key.includes('daily')) await this.redis.expire(key, 2 * 24 * 60 * 60); // 2 days\n    }\n  }\n\nasync getTopK(timeRange = 'alltime', k = 5) {\n    let key;\n\n    if (timeRange === 'hour') key = getHourlyKey();\n    else if (timeRange === 'day') key = getDailyKey();\n    else key = getAllTimeKey();\n\n    return await this.redis.zrevrange(key, 0, k - 1, 'WITHSCORES');\n  }\n\n\ninput:\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"kiwi\"}'\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"apple\"}'\ncurl -X POST http://localhost:3000/track -H \"Content-Type: application/json\" -d '{\"item\":\"apple\"}'\n\n\noutput:\n{\n  \"topK\": [\"apple\", \"2\", \"kiwi\", \"1\"]\n}\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "jSUNdqNCoEDwQXyKz6X_7",
      "type": "line",
      "x": 695.788818359375,
      "y": 1667.87890625,
      "width": 589.29296875,
      "height": 0.10546875,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "dotted",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": {
        "type": 2
      },
      "seed": 1829460540,
      "version": 47,
      "versionNonce": 1929274940,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1752656635993,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          589.29296875,
          0.10546875
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "polygon": false
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff",
    "lockedMultiSelections": {}
  },
  "files": {}
}